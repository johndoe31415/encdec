#!/usr/bin/python3
#	encdec - Trivial encryption/decryption utility using strong KDF and ciphers
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of encdec.
#
#	encdec is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	encdec is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with encdec; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import json
import getpass
from FriendlyArgumentParser import FriendlyArgumentParser
from EncryptedFile import EncryptedFile

parser = FriendlyArgumentParser()
parser.add_argument("--gen-keyfile", action = "store_true", help = "Generate a derive key from a keyboard-given master passphrase if the keyfile does not exist yet.")
parser.add_argument("-k", "--keyfile", metavar = "filename", type = str, help = "Read key/kdf from JSON input file.")
parser.add_argument("-c", "--cipher", choices = [ "AES256-GCM" ], default = "AES256-GCM", help = "Cipher to use for encryption, can be one of %(choices)s, defaults to %(default)s.")

group = parser.add_mutually_exclusive_group()
group.add_argument("-e", "--encrypt", action = "store_true", help = "Encrypt input file.")
group.add_argument("-d", "--decrypt", action = "store_true", help = "Decrypt input file.")

parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output file if it already exists.")
parser.add_argument("infile", metavar = "infile", type = str, help = "Input file")
parser.add_argument("outfile", metavar = "outfile", type = str, help = "Output file")
args = parser.parse_args(sys.argv[1:])

if (not args.encrypt) and (not args.decrypt):
	print("Must specify if encrypting or decrypting.", file = sys.stderr)
	sys.exit(1)

if (not args.force) and os.path.exists(args.outfile):
	print("Refusing to overwrite: %s" % (args.outfile), file = sys.stderr)
	sys.exit(1)

if args.gen_keyfile:
	if args.keyfile is None:
		print("Need to specify a keyfile to be generated.", file = sys.stderr)
		sys.exit(1)
	if not os.path.exists(args.keyfile):
		key = getpass.getpass("Master passphrase: ")
		key = key.encode()
		print("Deriving key...")
		salt = bytes.fromhex("1f7fec216feb8d1a3a65bdb93ba7546a52493c49e67b61c72863bd288854fe96")
		(meta, dkey) = EncryptedFile.kdf(kdf = { "name": "scrypt", "N": 2 ** 22, "p": 32, "r": 8, "dklen": 32 }, salt = salt, key = key)
		with open(args.keyfile, "w") as f:
			json.dump({ "key": dkey.hex() }, f)

if args.keyfile is None:
	key = getpass.getpass("Passphrase: ")
	key = key.encode()
else:
	with open(args.keyfile) as f:
		data = json.load(f)
	key = data["key"].encode("utf-8")

if args.encrypt:
	with open(args.infile, "rb") as f:
		plaintext = f.read()
	encfile = EncryptedFile.encrypt(plaintext = plaintext, kdf = { "name": "scrypt", "N": 1024 * 1024 }, key = key, cipher = args.cipher)
	encfile.write(args.outfile)
elif args.decrypt:
	encfile = EncryptedFile.read(args.infile)
	plaintext = encfile.decrypt(key)
	with open(args.outfile, "wb") as f:
		f.write(plaintext)
